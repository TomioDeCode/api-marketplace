// This is your Prisma schema file,
// learn more about it in the docs: https:

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https:

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  username          String    @unique
  email             String    @unique
  password          String
  role              UserRole  @default(USER)
  isEmailVerified   Boolean   @default(false)
  verificationToken String?   @unique
  tokenExpiry       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  endpoints      Endpoint[]
  notifications  Notification[]
  passwordResets PasswordReset[]

  @@map("users")
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
  @@map("password_resets")
}

enum UserRole {
  ADMIN
  USER
}

model Endpoint {
  id            String         @id @default(uuid())
  name          String
  url           String
  userId        String
  checkInterval Int            @default(300000)
  timeout       Int            @default(10000)
  status        EndpointStatus @default(ACTIVE)
  lastChecked   DateTime       @default(now())
  responseTime  Int            @default(0)
  availability  Decimal        @default(100.00) @db.Decimal(5, 2)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user          User           @relation(fields: [userId], references: [id])
  monitorLogs   MonitorLog[]
  notifications Notification[]

  @@index([userId])
  @@map("endpoints")
}

model MonitorLog {
  id           String   @id @default(uuid())
  endpointId   String
  timestamp    DateTime @default(now())
  statusCode   Int?
  responseTime Int?
  success      Boolean
  errorMessage String?  @db.Text
  errorType    String?
  createdAt    DateTime @default(now())

  endpoint Endpoint @relation(fields: [endpointId], references: [id])

  @@index([endpointId])
  @@index([timestamp])
  @@map("monitor_logs")
}

model Notification {
  id         String           @id @default(uuid())
  userId     String
  endpointId String
  type       NotificationType
  message    String           @db.Text
  read       Boolean          @default(false)
  timestamp  DateTime         @default(now())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  endpoint Endpoint @relation(fields: [endpointId], references: [id])

  @@index([userId])
  @@index([endpointId])
  @@index([timestamp])
  @@map("notifications")
}

enum EndpointStatus {
  ACTIVE
  WARNING
  DOWN
}

enum NotificationType {
  DOWN
  SLOW_RESPONSE
  RECOVERED
}
