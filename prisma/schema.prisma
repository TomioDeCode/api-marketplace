// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())
  username          String          @unique
  email             String          @unique
  password          String
  role              UserRole        @default(USER)
  isEmailVerified   Boolean         @default(false)
  verificationToken String?         @unique
  tokenExpiry       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  endpoints         Endpoint[]
  notifications     Notification[]
  passwordResets    PasswordReset[]
  settings          UserSettings?

  @@map("users")
}

model UserSettings {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  emailNotifications     Boolean  @default(true)
  slackWebhook           String?
  discordWebhook         String?
  telegramChatId         String?
  notificationThresholds Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
  @@map("password_resets")
}

enum UserRole {
  ADMIN
  USER
}

model Endpoint {
  id                 String              @id @default(uuid())
  name               String
  url                String
  userId             String
  method             HttpMethod          @default(GET)
  headers            Json?
  body               String?             @db.Text
  checkInterval      Int                 @default(300000)
  timeout            Int                 @default(10000)
  status             EndpointStatus      @default(ACTIVE)
  lastChecked        DateTime            @default(now())
  responseTime       Int                 @default(0)
  availability       Decimal             @default(100.00) @db.Decimal(5, 2)
  expectedStatus     Int?
  expectedResponse   String?             @db.Text
  tags               String?
  sslExpiry          DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  user               User                @relation(fields: [userId], references: [id])
  monitorLogs        MonitorLog[]
  notifications      Notification[]
  maintenanceWindows MaintenanceWindow[]

  @@index([userId])
  @@index([status])
  @@index([lastChecked])
  @@map("endpoints")
}

model MaintenanceWindow {
  id          String   @id @default(uuid())
  endpointId  String
  startTime   DateTime
  endTime     DateTime
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  endpoint    Endpoint @relation(fields: [endpointId], references: [id])

  @@index([endpointId])
  @@index([startTime, endTime])
  @@map("maintenance_windows")
}

model MonitorLog {
  id           String   @id @default(uuid())
  endpointId   String
  timestamp    DateTime @default(now())
  statusCode   Int?
  responseTime Int?
  success      Boolean
  errorMessage String?  @db.Text
  errorType    String?
  response     String?  @db.Text
  headers      Json?
  sslDetails   Json?
  createdAt    DateTime @default(now())
  endpoint     Endpoint @relation(fields: [endpointId], references: [id])

  @@index([endpointId])
  @@index([timestamp])
  @@index([success])
  @@map("monitor_logs")
}

model Notification {
  id         String           @id @default(uuid())
  userId     String
  endpointId String
  type       NotificationType
  message    String           @db.Text
  read       Boolean          @default(false)
  timestamp  DateTime         @default(now())
  metadata   Json?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  user       User             @relation(fields: [userId], references: [id])
  endpoint   Endpoint         @relation(fields: [endpointId], references: [id])

  @@index([userId])
  @@index([endpointId])
  @@index([timestamp])
  @@index([read])
  @@map("notifications")
}

enum HttpMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
  HEAD
  OPTIONS
}

enum EndpointStatus {
  ACTIVE
  WARNING
  DOWN
  MAINTENANCE
}

enum NotificationType {
  DOWN
  SLOW_RESPONSE
  RECOVERED
  SSL_EXPIRING
  MAINTENANCE_STARTED
  MAINTENANCE_ENDED
  CUSTOM
}
