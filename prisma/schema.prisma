// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  email            String    @unique
  password         String
  role             Role
  emailVerified    Boolean   @default(false)
  verificationCode String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  products         Product[]
  orders           Order[]
  reviews          Review[]
}

model Product {
  id          Int               @id @default(autoincrement())
  sellerId    Int
  name        String
  description String?
  price       Float
  stock       Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  seller      User              @relation(fields: [sellerId], references: [id])
  categories  ProductCategory[]
  orderItems  OrderItem[]
  reviews     Review[]
}

model Category {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  products ProductCategory[]
}

model ProductCategory {
  productId  Int
  categoryId Int
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Order {
  id         Int         @id @default(autoincrement())
  buyerId    Int
  totalPrice Float
  status     OrderStatus @default(pending)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  buyer      User        @relation(fields: [buyerId], references: [id])
  items      OrderItem[]
  payment    Payment?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id      Int           @id @default(autoincrement())
  orderId Int           @unique
  method  PaymentMethod
  status  PaymentStatus @default(pending)
  paidAt  DateTime?
  order   Order         @relation(fields: [orderId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  buyerId   Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  buyer     User     @relation(fields: [buyerId], references: [id])
}

enum Role {
  buyer
  seller
  admin
}

enum OrderStatus {
  pending
  paid
  shipped
  completed
  cancelled
}

enum PaymentMethod {
  credit_card
  bank_transfer
  ewallet
}

enum PaymentStatus {
  pending
  completed
  failed
}
